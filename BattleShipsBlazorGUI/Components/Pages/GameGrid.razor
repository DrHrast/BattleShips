@page "/GameGrid"

@rendermode InteractiveServer
@using Battleship.Model

<style>
	body {
		height: 100vh;
		width: 100vw;
		justify-content: center;
		overflow: hidden;
		text-align: center;
		display: flex;
		background-color: #242423;
	}

	.container {
		height: 80%;
		width: 80%;
		padding: 2%;
		margin: 5%;
		display: flex;
		flex-direction: column;
		border: 5px solid #44fa16;
		border-radius: 10px;
		background-color: #252e23;
		text-align: center;
		color: white;
	}

	.boards {
		display: flex;
		gap: 200px;
		margin: auto;
		justify-content: center;
	}

	.row {
		display: flex;
		flex-direction: row;
	}

	.square {
		height: 50px;
		width: 50px;
		gap: 2px;
	}

	.btn-pointer {
		cursor: default !important;
	}

	.btn-hover:hover {
		opacity: 0.5;
	}

	.ship {
		background-color: #8a484b;
	}

	.water {
		background-color: #a1bdc9;
	}

	.hit-ship {
		background-color: #4f2527;
		cursor: default !important;
	}

	.hit-water {
		background-color: #3a535e;
		cursor: default !important;
	}

	.ship-sunken {
		background-color: #323333;
		cursor: default !important;
	}
</style>

<div class="container">
	<h3>GameGrid</h3>
	<div class="boards">
		<div class="friendlyBoard">
			@fleetBoard
		</div>
		<div class="enemyBoard">
			@enemyShotBoard
		</div>
	</div>
</div>

@code {
	private int rowNumber = 10;
	private int columnNumber = 10;
	private int[] ships = {5, 4, 3, 3, 2};

	private List<List<Square>> friendlyBoard = [];
	private List<List<Square>> friendlyShots = [];
	private Gunnery friendlyGunnery = null!;
	private Fleet friendlyFleet = null!;
	private List<List<Square>> enemyBoard = [];
	private List<List<Square>> enemyShots = [];
	private Gunnery enemyGunnery = null!;
	private Fleet enemyFleet = null!;

	private RenderFragment ?fleetBoard;
	private RenderFragment ?enemyShotBoard;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();
		InitializePlayer();
		InitializeEnemy();
		await FillBoards();
	}

	private void InitializePlayer()
	{
		friendlyBoard.Clear();
		FleetBuilder fleetBuilder = new(rowNumber, columnNumber, ships);
		friendlyFleet = fleetBuilder.CreateFleet();
		friendlyGunnery = new Gunnery(rowNumber, columnNumber, ships);

		CreateBoards(friendlyBoard, friendlyShots);
	}

	private void InitializeEnemy()
	{
		enemyBoard.Clear();
		FleetBuilder fleetBuilder = new(rowNumber, columnNumber, ships);
		enemyFleet = fleetBuilder.CreateFleet();
		enemyGunnery = new Gunnery(rowNumber, columnNumber, ships);

		CreateBoards(enemyBoard, enemyShots, false);
	}

	private void CreateBoards(List<List<Square>> fleetBoard, List<List<Square>> shotsBoard, bool IsFriendly=true)
	{
		for(int i = 0; i < rowNumber; ++i)
		{
			List<Square> fleetRow = [];
			List<Square> shotsRow = [];
			for(int j = 0; j < columnNumber; ++j)
			{
				fleetRow.Add(new Square(i, j));
				shotsRow.Add(new Square(i, j));
			}
			fleetBoard.Add(fleetRow);
			shotsBoard.Add(shotsRow);
		}

		if(IsFriendly)
		{
			foreach(var ship in friendlyFleet.Ships)
			{
				foreach(var field in ship.Squares)
				{
					fleetBoard[field.Row][field.Column].IsShip = true;
				}
			}
		}
		else
		{
			foreach(var ship in enemyFleet.Ships)
			{
				foreach(var field in ship.Squares)
				{
					fleetBoard[field.Row][field.Column].IsShip = true;
				}
			}	
		}
	}

	private async Task FillBoards()
	{
		await FillFriendlyBoard();
		await FIllEnemyBoard();
	}

	private async Task FillFriendlyBoard()
	{
		int d = 0;
		fleetBoard = builder =>
		{
			foreach (var row in friendlyBoard) /* (int i = 0; i < friendlyBoard.Count(); ++i) */
			{
				builder.OpenElement(0, "div");
				builder.AddAttribute(1, "class", "row");

				foreach (var square in row) /* (int j = 0; j < friendlyBoard[i].Count(); ++j) */
				{
					builder.OpenElement(2, "button");
					string cssClass = square.SquareState switch
					{
						SquareState.Hit => "btn-pointer square hit-ship",
						SquareState.Missed => "btn-pointer square hit-water",
						SquareState.Sunken => "btn-pointer square ship-sunken",
						_ => "btn-pointer square water"
					};
					builder.AddAttribute(3, "class", square.IsShip ? "square ship" : "square water");
					//builder.AddAttribute(d++, "Disabled", "true");
					builder.CloseElement();
				}

				builder.CloseElement();
			}
		};
		StateHasChanged();
	}

	private async Task FIllEnemyBoard() 
	{
		int d = 0;
		enemyShotBoard = builder =>
		{
			foreach (var row in enemyBoard)/* (int i = 0; i < enemyBoard.Count(); ++i) */
			{
				builder.OpenElement(0, "div");
				builder.AddAttribute(1, "class", "row");

				foreach (var square in row) /* (int j = 0; j < enemyBoard[i].Count(); ++j) */
				{
					builder.OpenElement(2, "button");
					string cssClass = square.SquareState switch
					{
						SquareState.Hit => "square hit-ship",
						SquareState.Missed => "square hit-water",
						SquareState.Sunken => "square ship-sunken",
						_ => "btn-hover square water"
					};
					builder.AddAttribute(3, "class", cssClass);
					builder.AddAttribute(4, "onclick", EventCallback.Factory.Create(this, async () => await FriendlyFire(square)));
					builder.CloseElement();
				}

				builder.CloseElement();
			}
		};
		StateHasChanged();
	}

	private async Task FriendlyFire(Square target)
	{
		var hit = enemyFleet.Hit(target.Row, target.Column);

		switch(hit)
		{
			case HitResult.Hit:
				enemyBoard[target.Row][target.Column].ChangeState(SquareState.Hit);
				break;
			case HitResult.Sunken:
				{
					foreach(var ship in enemyFleet.Ships)
					{
						if (ship.Squares.Any(square => square.Row == target.Row && square.Column == target.Column))
						{
							foreach (var sunkSquare in ship.Squares)
							{
								enemyBoard[sunkSquare.Row][sunkSquare.Column].ChangeState(SquareState.Sunken);
							}
							break;
						}
					}
					break;
				}
			default:
				enemyBoard[target.Row][target.Column].ChangeState(SquareState.Missed);
				break;
		}

		if(!IsGameOver())
		{
			await EnemyFire();
		}
	}

	private async Task EnemyFire()
	{
		var target = enemyGunnery.Next();
		var hit = friendlyFleet.Hit(target.Row, target.Column);

		enemyGunnery.ProcessHitResult(hit);
		switch(hit)
		{
			case HitResult.Hit:
				friendlyBoard[target.Row][target.Column].ChangeState(SquareState.Hit);
				break;
			case HitResult.Sunken:
				{
					foreach (var ship in friendlyFleet.Ships)
					{
						if (ship.Squares.Any(square => square.Row == target.Row && square.Column == target.Column))
						{
							foreach (var sunkSquare in ship.Squares)
							{
								friendlyBoard[sunkSquare.Row][sunkSquare.Column].ChangeState(SquareState.Sunken);
							}
							break;
						}
					}
					break;
				}
			default:
				friendlyBoard[target.Row][target.Column].ChangeState(SquareState.Missed);
				break;
		}

		StateHasChanged();

		if (IsGameOver())
		{
			Console.WriteLine("You Lost!");
		}
	}

	private bool IsGameOver()
	{
		var playerLost = friendlyFleet.Ships.SelectMany(s => s.Squares).All(ship => ship.SquareState != SquareState.Intact);
		var enemyLost = enemyFleet.Ships.SelectMany(s => s.Squares).All(ship => ship.SquareState != SquareState.Intact);

		return playerLost || enemyLost;
	}
}
