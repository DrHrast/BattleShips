@page "/AiGameGrid"

@rendermode InteractiveServer
@using Battleship.Model

<style>
	body {
		height: 100vh;
		width: 100vw;
		justify-content: center;
		overflow: hidden;
		text-align: center;
		display: flex;
		background-color: #242423;
	}
	h3 {
		font-size: xxx-large;
		text-shadow: 1px 1px 4px black, 0 0 1em #44fa16, 0 0 0.2em #252e23;
	}

	.container {
		height: 80%;
		width: 80%;
		padding: 2%;
		margin: 5%;
		display: flex;
		flex-direction: column;
		border: 5px solid #44fa16;
		border-radius: 10px;
		background-color: #252e23;
		text-align: center;
		color: white;
	}

	.boards {
		display: flex;
		gap: 200px;
		margin: auto;
		justify-content: center;
	}

	.row {
		display: flex;
		flex-direction: row;
	}

	.square {
		height: 50px;
		width: 50px;
		gap: 2px;
	}

	.btn-pointer {
		cursor: default !important;
	}

	.btn-hover:hover {
		opacity: 0.5;
	}

	.ship {
		background-color: #8a484b;
	}

	.water {
		background-color: #a1bdc9;
	}

	.hit-ship {
		background-color: #4f2527;
		cursor: default !important;
		pointer-events: none;
	}

	.hit-water {
		background-color: #3a535e;
		cursor: default !important;
		pointer-events: none;
	}

	.ship-sunken {
		background-color: #323333;
		cursor: default !important;
		pointer-events: none;
	}

	.background-container {
		position: absolute;
		top: 0;
		left: 0;
		z-index: -1;
		font-size: 1rem;
		color: rgba(255, 255, 255, 0.1);
		width: 40%; /* Restricts the width to 40% of the page */
		text-align: left;
		overflow: hidden;
		overflow-wrap: normal;
		pointer-events: none;
		height: 100%; /* Ensures it spans the height of the screen */
	}

</style>

<Modal @ref=modal IsServiceModal="true">
	<FooterTemplate>
		<Button @onclick="NewGame">Try Again</Button>
	</FooterTemplate>
</Modal>
<div class="background-container">@gameText</div>
<div class="container">
	<h3>GameGrid</h3>
	<div class="boards">
		<div class="friendlyBoard">
			<label>Skynet</label>
			@fleetBoard
		</div>
		<div class="enemyBoard">
			<label>HumanAI</label>
			@enemyShotBoard
		</div>
	</div>
</div>

@code {
	[Inject] private ModalService modalService { get; set; }

	private int rowNumber = 10;
	private int columnNumber = 10;
	private int[] ships = { 5, 4, 3, 3, 2 };
	private string gameText = "Player plays first\n";
	private int aiWon = 0;
	private int skynetWon = 0;

	private Modal modal = default!;
	private List<List<Square>> friendlyBoard = [];
	private List<List<Square>> friendlyShots = [];
	private Gunnery friendlyGunnery = null!;
	private Fleet friendlyFleet = null!;
	private List<List<Square>> enemyBoard = [];
	private List<List<Square>> enemyShots = [];
	private Gunnery enemyGunnery = null!;
	private Fleet enemyFleet = null!;

	private RenderFragment? fleetBoard;
	private RenderFragment? enemyShotBoard;

	protected override async Task OnInitializedAsync()
	{
		try
		{
			await base.OnInitializedAsync();
			await initializeEverything();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Initialization error: {ex.Message}");
		}
	}

	private void InitializePlayer()
	{
		friendlyBoard.Clear();
		FleetBuilder fleetBuilder = new(rowNumber, columnNumber, ships);
		friendlyFleet = fleetBuilder.CreateFleet();
		friendlyGunnery = new Gunnery(rowNumber, columnNumber, ships);

		CreateBoards(friendlyBoard, friendlyShots);
	}

	private void InitializeEnemy()
	{
		enemyBoard.Clear();
		FleetBuilder fleetBuilder = new(rowNumber, columnNumber, ships);
		enemyFleet = fleetBuilder.CreateFleet();
		enemyGunnery = new Gunnery(rowNumber, columnNumber, ships);

		CreateBoards(enemyBoard, enemyShots, false);
	}

	private void CreateBoards(List<List<Square>> fleetBoard, List<List<Square>> shotsBoard, bool IsFriendly = true)
	{
		for (int i = 0; i < rowNumber; ++i)
		{
			List<Square> fleetRow = [];
			List<Square> shotsRow = [];
			for (int j = 0; j < columnNumber; ++j)
			{
				fleetRow.Add(new Square(i, j));
				shotsRow.Add(new Square(i, j));
			}
			fleetBoard.Add(fleetRow);
			shotsBoard.Add(shotsRow);
		}

		if (IsFriendly)
		{
			foreach (var ship in friendlyFleet.Ships)
			{
				foreach (var field in ship.Squares)
				{
					fleetBoard[field.Row][field.Column].IsShip = true;
				}
			}
		}
		else
		{
			foreach (var ship in enemyFleet.Ships)
			{
				foreach (var field in ship.Squares)
				{
					fleetBoard[field.Row][field.Column].IsShip = true;
				}
			}
		}
	}

	private async Task FillBoards()
	{
		await FillFriendlyBoard();
		await FIllEnemyBoard();
		StateHasChanged();
	}

	private async Task FillFriendlyBoard()
	{
		int d = 0;
		fleetBoard = builder =>
		{
			foreach (var row in friendlyBoard)
			{
				builder.OpenElement(d++, "div");
				builder.AddAttribute(d++, "class", "row");

				foreach (var square in row)
				{
					builder.OpenElement(d++, "button");
					string cssFriendClass = square.SquareState switch
					{
						SquareState.Hit => "btn-pointer square hit-ship",
						SquareState.Missed => "btn-pointer square hit-water",
						SquareState.Sunken => "btn-pointer square ship-sunken",
						SquareState.Intact => square.IsShip ? "btn-pointer square ship" : "btn-pointer square water",
						_ => "btn-pointer square water"
					};
					builder.AddAttribute(d++, "class", cssFriendClass);
					builder.CloseElement();
				}

				builder.CloseElement();
			}
		};
	}

	private async Task FIllEnemyBoard()
	{
		int d = 0;
		enemyShotBoard = builder =>
		{
			foreach (var row in enemyBoard)
			{
				builder.OpenElement(d++, "div");
				builder.AddAttribute(d++, "class", "row");

				foreach (var square in row)
				{
					builder.OpenElement(d++, "button");
					string cssClass = square.SquareState switch
					{
						SquareState.Hit => "btn-pointer square hit-ship",
						SquareState.Missed => "btn-pointer square hit-water",
						SquareState.Sunken => "btn-pointer square ship-sunken",
						SquareState.Intact => square.IsShip ? "btn-pointer square ship" : "btn-pointer square water",
						_ => "btn-pointer square water"
					};
					builder.AddAttribute(d++, "class", cssClass);
					builder.CloseElement();
				}

				builder.CloseElement();
			}
		};
	}

	private async Task FriendlyAIFire()
	{
		var target = friendlyGunnery.Next();
		var hit = enemyFleet.Hit(target.Row, target.Column);

		friendlyGunnery.ProcessHitResult(hit);
		switch (hit)
		{
			case HitResult.Hit:
				enemyBoard[target.Row][target.Column].ChangeState(SquareState.Hit);
				break;
			case HitResult.Sunken:
				{
					foreach (var ship in enemyFleet.Ships)
					{
						if (ship.Squares.Any(square => square.Row == target.Row && square.Column == target.Column))
						{
							foreach (var sunkSquare in ship.Squares)
							{
								enemyBoard[sunkSquare.Row][sunkSquare.Column].ChangeState(SquareState.Sunken);
							}
							break;
						}
					}
					break;
				}
			default:
				enemyBoard[target.Row][target.Column].ChangeState(SquareState.Missed);
				break;
		}

		StateHasChanged();
		if (!IsGameOver())
		{
			gameText += "Skynet is attacking! \n";
			StateHasChanged();
			await Task.Delay(50);
			await EnemyFire();
		}
		else
		{
			gameText += "Player saved Sarah Conor";
			aiWon++;
			GameOver("player");
		}
	}

	private async Task EnemyFire()
	{
		var target = enemyGunnery.Next();
		var hit = friendlyFleet.Hit(target.Row, target.Column);

		enemyGunnery.ProcessHitResult(hit);
		switch (hit)
		{
			case HitResult.Hit:
				friendlyBoard[target.Row][target.Column].ChangeState(SquareState.Hit);
				break;
			case HitResult.Sunken:
				{
					foreach (var ship in friendlyFleet.Ships)
					{
						if (ship.Squares.Any(square => square.Row == target.Row && square.Column == target.Column))
						{
							foreach (var sunkSquare in ship.Squares)
							{
								friendlyBoard[sunkSquare.Row][sunkSquare.Column].ChangeState(SquareState.Sunken);
							}
							break;
						}
					}
					break;
				}
			default:
				friendlyBoard[target.Row][target.Column].ChangeState(SquareState.Missed);
				break;
		}

		StateHasChanged();
		if (IsGameOver())
		{
			gameText += "Skynet rules the world!";
			skynetWon++;
			GameOver("skynet");
		}
		else
		{
			gameText += "Fire back player! \n";
			StateHasChanged();
			
			await Task.Delay(50);
			await FriendlyAIFire();
			
		}
	}

	private bool IsGameOver()
	{
		var playerLost = friendlyFleet.Ships.SelectMany(s => s.Squares).All(ship => ship.SquareState != SquareState.Intact);
		var enemyLost = enemyFleet.Ships.SelectMany(s => s.Squares).All(ship => ship.SquareState != SquareState.Intact);

		return playerLost || enemyLost;
	}

	private void GameOver(string winner)
	{
		if (winner == "player")
		{
			ShowGameOverModal(1);
		}
		else
		{
			ShowGameOverModal(2);
		}
	}

	private class ModalOptions : ModalOption
	{
		public EventCallback OnFooterButtonClick { get; set; }
	}

	private async Task ShowGameOverModal(int indicator)
	{
		var modalOption = new ModalOption();
		switch (indicator)
		{
			case 1:
				{
					modalOption = new ModalOptions
						{
							Title = "GAME OVER",
							Type = ModalType.Dark,
							Message = $"Game over! Humans saved Sarah Conor\nand the world! " + $"For the {aiWon}th time. " + $"Record so far: {aiWon}:{skynetWon}",
							IsVerticallyCentered = true,
							OnFooterButtonClick = EventCallback.Factory.Create(this, async () => await NewGame())
						};
					break;
				}
			case 2:
				{
					modalOption = new ModalOptions
						{
							Title = "GAME OVER",
							Type = ModalType.Danger,
							Message = $"Game over! Skynet won and Enslaved human kind. " + $"For the {skynetWon}th time. " + $"Record so far: {skynetWon}:{aiWon}",
							IsVerticallyCentered = true,
							OnFooterButtonClick = EventCallback.Factory.Create(this, async () => await NewGame())
						};
					break;
				}
		}
		await modalService.ShowAsync(modalOption);
	}

	private async Task initializeEverything()
	{
		StateHasChanged();
		InitializePlayer();
		InitializeEnemy();
		await FillBoards();
		gameText = "Player plays first. \n";
		await FriendlyAIFire();
		
	}

	private async Task NewGame()
	{
		await modal.HideAsync();
		await initializeEverything();
	}
}